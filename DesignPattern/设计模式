设计模式的概述
设计模式是一套被反复使用，多数人知晓的，经过分类编目的，代码设计经验的总结。
使用设计模式是为了可重用代码让代码更容易被他人理解，保证代码可靠性
设计模式不说一种方法和技术，而是一种思想
设计模式的几个要素
名字必须有一个简单有意义的名字
问题 描述在何时使用模式
解决方案 描述设计的组成部分以及如何解决问题
兄啊过 描述模式的效果以及优缺点
设计模式的设计原则：在实际开发中，我们要想更深入的了解面向对象思想
就必须熟悉前人总结过的面向对象的思想的设计原则
（六大原则）
单一职责原则
开闭原则
里氏替换原则
依赖注入原则
接口分离原则
迪米特原则
设计模式的分类（三大分类）
创建型模式 对象的创建
抽象工厂模式
建造者模式
工厂方法模式
原型模式
单例模式
结构型模式 对象的组成
适配器模式
桥接模式
组合模式
装饰模式
外观模式
享元模式
代理模式
行为型模式 对象的行为
职责链模式
命令模式
解释器模式
迭代器模式
中介者模式
备忘录模式
观察者模式
状态模式
策略模式
模板方法模式
访问者模式
----单例设计模式-----
单例模式概述
    单例模式，是一种非常常用的软件设计模式。在它的核心结构中只包含一个被称为单例的特殊类
    通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例
单例模式的特点：
    1单例类只能有一个实例
    2单例类必须自己创建自己的唯一实例
    3单例类必须给所有其他对象提供这一实例
单例模式的关键有两点
    1构造方法为私有，这样外界就不能随意调用
    2get的方法为静态，由类直接调用
单例模式的三种写法：
    1懒汉式//面试的时候推荐，面试官考的就是线程安全问题
    2饿汉式//开发的时候推荐
    3双重锁的形式
------------------
原型模式
    字面意思指原来的类型或模型。在原型模式中，我门可以利用一个原型对象来指明
    我们所要创建对象的类型，然后通过复制这个对象的方法来获得与该对象一模一样的对象实例，这就是原型模式的目的
原型模式的优点：
     允许动态增加或减少产品类
   缺点：
   每个要使用原型模式的类都必须实现Cloneable接口，添加（重写）clone方法
原型模式分类
克隆分为：
    浅克隆：
        浅克隆就是只复制java对象中的基础类型，而java对象中的引用类型不会复制
        浅克隆很简单，只要实现一下cloneable接口然后重写一下clone方法即可
    深克隆：
        深克隆就是复制了基础类型由复制了引用类型
        总结：
            单例模式就是保证一个类只存在一个实例，就是只初始化一次，第一次完成初始化之后
            重复使用的时候返回的都是这个实例，而不是重写new一个新的对象
            原型可以创建多次
----------------------------------
工厂模式
工厂模式是我们最常用的实例化对象的模式，是用工厂方法代替NEW操作的一种模式
工厂分类
1简单工厂：一个抽象产品类，派生出多给具体产品类，一个具体的工厂类，可以创建多个具体的产品类
又叫静态工厂方法模式，它定义一个具体的工厂类负责创建一些类的实例
优点：
客户端不需要再负责对象的创建，从而明确了各个类的职责
缺点：这个静态工厂类负责所有对象的创建，如果有新的对象增加，或者某些创建方式不相同，就需要不断的修改工厂类，不利于后期维
2工厂方法：一个抽象产品类，可以派生多个具体的产品类，一个抽象的工厂类，可以派生出多给具体的工厂类
每个具体的工厂类都只能创建一个具体的产品类的实例
工厂方法模式中抽象工厂类负责定义创建对象的接口，具体对象的创建工作由继承抽象工厂的具体类实现
优点：
    客户端不需要在负责对象的创建，从而明确了各个类的职责，如果有新的对象增加，只需要增加一个具体的类和具体的工厂类即可
    不影响已有的代码，后期维护容易，增强了系统的扩展性
缺点：
    需要额外编写代码，增加了工作量
3抽象工厂
多个抽象产品类，每个抽象产品类可以派生出多个具体产品类，一个抽象工厂类，可以派生出多个具体工厂类
每个具体工厂类，可以创建多个具体产品类的实例
抽象工厂模式是工厂方法模式的升级版，工厂方法中的每一个具体的工厂类负责生产一种对应的产品，而抽象
工厂模式中的一个具体的工厂类负责的是生产一个产品线上的一个或多个产品。
相对来说，抽象工厂模式不易扩展商品，但易扩展生产商品线的工厂类，也就是说商品线易扩展
特点
    可用来生产不同产品族的全部产品
    实现了创建者和调用者的分离
---------------------------------------
代理模式
代理模式是一种设计模式，提供了对目标对象另外的访问方式，通过代理对象访问目标对象
这样做的好处是可以在目标对象实现的基础上，增强额外的功能操作，即扩展目标对象的功能
这里使用到编程中的一个思想：不要随意去修改别人已经写好的代码或方法，如果需要修改
可以通过代理的方式来扩展该方法
代理分类
    静态代理
    静态代理在使用时，要定义接口或者父类，被代理对象与代理对象一起实现相同的接口或者是继承相同父类
    优点：可以做到在不修改目标对象的功能前提下，对目标功能扩展
    缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类，
    类太多，同时，一旦接口增加方法，目标对象与代理对象都需要维护
    动态代理：cglib动态代理，jdk动态代理
    JDK动态代理的对象必须要实现一个或多个接口
    cglib不需要实现接口
    动态代理的特点：
        1代理对象，不需要实现接口
        2代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象
        （需要我们锁定代理对象/目标对象实现的接口类型）
        动态代理也叫JDK代理，接口代理
        未完待续。。