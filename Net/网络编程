网络参考模型
OSI参考模型
应用层，表示层，会话层，传输层，网络层，数据链路层，物理层
TCP/IP参考模型
应用层，传输层，网际层，主机至网络层
当发送消息时，需要按照上述从前向后的次序，对发生的内容进行层层加包，然后发送过去
当接受消息时，需要按照上述相反的顺序，对接受的内容层层拆包，然后解析出来

常见协议
    http:超文本传输协议，浏览网站的时候使用该协议
    ftp:文本传输协议，上传下载文件时使用该协议
    tcp:传输控制协议，是一种面向连接的协议，类似于打电话，网络通信间需要使用该协议
    udp:用户数据报协议，是一种非面向连接的协议，类似于写信，网络通信使用该协议
    ip:互联网协议，上述协议的底层协议
    协议：就是一种约定/规则，是通信双方都要遵循的机制
------------
网络通信三要数
IP地址（InetAddress类）：网络中设备的唯一标识（ipv4,32位，ipv6,128位）
不易记忆，可用主机名
端口号：用于标识进程的逻辑地址，不同进程的标识
物理端口是网卡，每个网络程序都会至少有一个逻辑端口，用于标识进程的逻辑地址，不同进程的标识
有效端口号0~65535，0~1024是系统使用或保留的端口号，可以定位到设备上具体的进程
在网络编程中需要提供：Ip地址+端口号
本质上是由16位二进制组成的整数，编程时要从1025开始使用
传输协议：通讯的规则，常见TCP,UDP
例子：我和你说话，就要找到你（通过ip地址），你用耳朵（端口号）接收我说话，说哪国语言（传输协议）
------------
UDP：将数据源和目的封装成数据包，不需要建立连接，每个数据报的大小限制在64K
因为无连接，是不可靠协议，不需要建立连接，速度快
TCP：建立连接，形成传输数据的通道，在连接中进行大数据量传输，通过三次握手完成连接，是可靠协议
必须建立连接，效率稍低
------------
套接字：socket 网络上具有唯一标识的IP地址和端口号组合在一起才能构成唯一能识别的标识符套接字。
原理机制：1 通信两端都有socket 2 网络通信其实就是socket间的通信 3 数据在两个socket间通过IO流传输
------------
Tcp传输容易出现的问题
客户端连接上服务端，两端都在等待，没有任何数传输
因为read()或者readline()方法是阻塞式
解决办法，自定义结束标签，使用shutdowninpt，shutdownoutput方法
-----------
客户端建立思路：
1创建TCP客户端socket服务，使用的是socket对象
2如果连接成功，说明数据传输通道建立
通道就是socket流，是底层建立好的
是流就应该有输入输出
想要获取输入或输入流的对象，可以找socket获取
可以通过getOutputstream()和getInputstream()来获取两个字节流
3使用输入流，讲过数据写入
4关闭资源
建立TCP服务器端思路：
    1创建服务器socket服务，通过Serversocket对象
    2服务器端必须对外提供一个端口，否则客户端无法连接
    3获取连接过来的客户端对象
    4通过客户端对象获取socket流读取客户端发来的数据打印
    5关闭资源，关闭流，关闭服务器
------------
serversocket类
serversocket(int port)
accept()用于监听并接收到服务器套接字的连接请求
close() 关闭套接字
socket类
getInputStream 用于获取此套接字的输入流
getOutputStream 用于获取此套接字的输出流
close关闭套接字
-------------
UDP编程
DatagramSocket与Datagrampacket
建立发送端，接收端
建立数据包
调用socket的发送接收方法
关闭socket
发送端与接收端是两个独立的运行程序
UDP传输-发送思路
建立UDP的socket服务
将要发送的数据封装成数据包
通过UDP的socket服务将数据包发送出来
关闭资源
编程模型
主机A（接收方）
1创建DatagramSocket类型的对象，并提供端口号
2创建DatagramPacket类型的对象，用于接收发来的数据
3使用上述的对象，接收数据内容，使用receive()方法
4关闭相关资源
主机B（发送方）
1创建DatagramSocket类型的对象
2创建DatagramPacket类型的对象，并提供端口号和IP地址
3使用上述的对象发送数据内容，使用send()方法
4关闭相关资源
------------
DatagramSocket()：用于创建接收和发送数据报的套接字
DatagramSocket(int port):创建套接字并绑定端口号
receive(DatagramPacket p)用于接收数据并放到参数指定的数据报中
send(DatagramPacket p ) 用于将参数指定的数据报发送出去
close()关闭套接字
DatagramPacket()用于描述数据报的内容
DatagramPacket(byte[] buf int length)
构造DatagramPacket,用来接受长度为Length的数据包
DatagramPacket(byte[] buf ,int length,InetAddress,int port)
构造数据包，用来将长度为length的包发送到指定主机上的指定端口号
InetAddress getAddress() - 用于获取发送方/接收方的IP地址信息
int getPort() - 用于获取发送方/接收方端口号信息
int getLength() - 用于获取数据报中数据的长度
----------------
TCP协议和UDP协议的比较
tcp 是一种面向连接协议/udp是非面向连接协议
类似于打电话/类似于写信
是一种全双工的字节流通信方式，UDP是全双工的数据报通信方式
服务器压力比较大/小，资源消耗比较高/低，发送数据的效率相对来低/高